CLAIMS 

Examples to use: 

	- problem: find a prediction function to predict variables causing an output, like predicting stock price or a diagnosis from symptoms/ausative conditions
		
		- interface traversal
			- information (describing variable types, redundancies, missing info, etc)
			- system (fitting the variables to a system format)
			- causal (finding root/direct causes & causal structures)
			- concept (whether the problem is valid given a definition of price)
			- change (how the function can change)
		
		- if thats not enough to fulfill solution metrics or reduce the problem (identify a range of possible prediction functions), you could do iterative traversals with interface operations
			- causal * change * pattern - to examine whether causal change patterns can reduce the problem or identify a solution
			- concept * change * causes - to identify if a concept change looks imminent

	- problem: find & build an optimal invention design to fulfill intents like 'building a function with minimal bugs'

		- interface traversal
			- information (describing function intents, limits, and assumptions like parameters)
			- system (fitting the function to a system, formatted to include possible variance injection points, identify efficiencies like logic that can be merged, etc)
			- structure (identifying structures that can be applied to the function system, like filters (conditions), direction changes (control flow statements), relationships (assignments), and mismatches (errors)
			- potential (identifying unenforced rules, rule-intent imbalances, false similarities, & other objects of potential allowing exploit opportunities that are not already identified)
			- causal, intent, concept (test function impact on other causes, concepts, & intents, which are high-level objects a function can alter)
		
		- if the function implementation doesnt fulfill solution metrics, other interface traversals can be done
			- pattern interface (does this function comply with patterns for functions with similar solution metrics)
			- a system-object or function-concept interface like the 'efficiency interface' or 'ambiguity interface' (does this function have a more efficient or less ambiguous route between input & output that might fulfill a solution metric, given that maximizing efficiency & reducing ambiguity are standard system & function metrics)

	- problem: find an optimal route between start & end points, like the 'minimal trades to get equal problem/opportunity distribution'
		
		- interface traversal
			- information (identify differentiating attributes/functions/sub-systems of agents/positions/routes within the system)
			- system (identify relevant structures like abstraction layer to traverse at, identify important objects required to solve the problem, like trading problems/markets/skills/information/risk/bets vs. trading currency, or framing currency as a position attribute, rather than a standardizing interface)
			- structure (identify trade & other market structures that are important for understanding why resources dont get distributed fairly, like closed trade loops & independence machines)
			- potential (identify alternative perspectives that could also explain the variation in optimized routes, like alternate value definitions)
			- causal (identify causes like marketing, collusion, and regulations that prevent or interfere with equilibrium market events)
			- concept (identify concepts relevant to markets like balance, demand/supply matching, and how the concept of information can disrupt any other market bc it enables automation)
		
		- if queries of those interfaces are insufficient to solve the problem, interface operations can be used
			- the information-system-structure interface operation (can be used to determine information like the next layer of information objects that are relevant if enough automation is distributed)

1. A method comprising: 

	- obtaining a problem statement from a user including required solution metrics (such as priorities, functionality, or attributes)
		- converting 'distribute money equally' into a standardized problem statement like 'find a function to distribute resources in a fair way', which is the actual intent of the user

	- identifying problem & problem space metadata (such as problem type, variables, side effects, position on problem network, & minimum information required to solve the problem)
		- identifying: 
			- the problem type stack, like 'information asymmetry', 'find function', 'route optimization', 'system fitting', 'object identification'
			- the problem space metadata, like related problems ('getting consensus', 'aligning interests across disinterested parties', 'matching common interests')
			- the problem variables like 'information certainty (data accuracy/bias)', 'fairness definition across agent positions', 'cost-benefit of distributing vs. generating vs. deriving resources'
			- the minimum information to solve like 'algorithm to distribute or generate resources according to these definitions with x% consensus, y% accuracy, in a way that uses at least z% common interests like common problems'

	- identifying optimal origin interface to start traversing from, identifying the interface traversal sequence, & applying interface operations like combine/embed
		- using core operations (like find, apply, embed, build, create, derive) and standard interfaces, generate a custom flow diagram representing the interface query, which will specify what steps to take across the interface network to solve this problem

	- traversing the interface network (including interfaces such as information, insight, structure, math, concept, variance, potential, change, intent, perspective, system, attribute, pattern, function, cause, problem/question, solution/answer) according to that interface query, where the interface network is a network of interfaces acting as filters (where an interface is comprised of its definition routes, conversion function, core functions/objects/attributes, and related information objects like patterns & other metadata specific to the interface)

	- finding components on the interface that match the problem structures (including related objects like insights, patterns, & functions)
		- once an object is matched in an interface, the relationships of that object are queried and tested for relevance to the associated problem objects

	- reducing the problem statement into its most useful structure containing any matching interface objects found
		- if any matching interface objects are found, the problem definition is changed to reflect the new understanding

	- iterating the interface selection & traversal process to derive the solution space from the problem space & problem definition
		- if the solution metrics are not fulfilled, the interface query is updated if new information was found, the query is continued if no information was found, or a new query is generated if the previous query was complete

	- identifying & reducing the solution space from the standardized problem format
		- 

	- traversing subsequent interfaces to obtain additional information if the minimum information to solve is not reached

	- reducing the solution space by the problem & problem space definitions (using problem objects like priorities or metrics as filters)

	- returning identified solutions as a set of steps to reduce or solve the problem, as well as solution metrics, attributes, & actions, and/or related information objects like insights, patterns, systematized problem format, reduced solution space, or standardized problem descriptions, if no solutions are found.

2. The method of claim 1, wherein obtaining a problem statement includes: receiving a problem statement & translating the problem statement into its most standardized form, using standardization methods like replacing esoteric words with more common synonyms or using general/abstract versions of words, converting passive to active language, and removing words that don't change the meaning of the statement, and other operations that enable framing the problem as an information problem, with a target solution structure (for example, the solution structure of a 'prediction function' problem is a function fulfilling a metric of an associated data set, like minimized distance from maximum data points).

*** formatted standardized problem definition & metadata

3. The method of claim 2, wherein identifying the problem & problem space metadata includes: identifying the problem type given the most adjacent type (problem types like an information asymmetry, incentive conflict, unenforced rule, finding a prediction function, route optimization) and the minimum information required to solve the problem (inputs like alternate attribute sets, data sample size, solution requirements, constant assumptions, & other dependencies), then mapping the inferred/stated information describing the problem & problem space to a multi-dimensional structure generated by the problem variables (variables like number of information asymmetries, resource limits, decision points, variance sources, or unanswerable questions of the problem, the trajectory of sub-systems generating the problem if known, etc), a problem structure usually bound by assumption/filter/limit conditions, & indicating possible interactions between the problem objects & the other system objects like related problems & previous solutions, & containing the problem object in that space (as a network or other shape indicating the problem variable interactions within the problem space structure).

*** problem system 
*** problem space
*** problem network in problem space

4. The method of claim 3, wherein identifying the origin interface to start traversing from, interface traversal sequence, & applying interface operations like combine/inject includes: 
	- assessing which interface maximizes the value (calculated as a combination of metrics like specificity, uniqueness, and differentiation potential) of the given & directly inferable information, which may include recommended traversals given the problem type if identified (like how a 'prediction function' problem type has a recommended interface query sequence); 
	- whether interfaces should be applied to other interfaces with interface operations (applying the conceptual interface to the structural interface, for example);
	- which interfaces should be traversed in what sequence, combination, or other structure produced by an interface operation.

	This interface query is designed to retrieve or derive additional information necessary to describe information about the problem system, beyond its initially identified metadata, so that its corresponding solution space can be identified.

*** example interface query

5. The method of claim 4, wherein traversing the interface network includes: 
	- converting the problem definition to the interface using that interface's conversion function (which applies logic like system-mapping, position-finding, structure-matching, & object-identification logic);
	- checking for common attributes between problem objects & interface objects & their connecting structures (like transformations, subsets, & paths);
	- using matching interface relationships to infer relationships about associated problem objects;
	- identifyying starting points on the interface, including core objects & functions, directly mappable objects to the problem objects, or other starting points like important/required interface objects.

*** example interface conversion, matching, starting point selection, and inference about problem objects

6. The method of claim 1, further comprising iteratively repeating the interface traversal method on other interfaces, after calculating the remaining distance from the minimum information required to solve the problem, fulfilled solution requirements, & progress in reducing the problem, where output by each traversal may include information like matching interface objects, problem or problem/solution space metadata, or functions/attributes reducing the problem.

*** example calculation of distance to minimum information, problem reduction, and fulfilled solution requirements, then deriving which direction to continue interface traversal

7. The method of claim 1, wherein the solution metadata is identified & the interface network traversal process in claims 3 - 5 is repeated for reducing the problem space to a solution space & then deriving, finding, matching, applying, or building a specific solution or general solution method that reduces the problem into a form that is more adjacent to its final solved form (occupying a point rather than a multi-dimensional structure in the problem space definition), where the solution method may be executed on other interfaces and is then converted to a vector or other object impacting the formatted problem on an interim interface used for calculations, and is then converted to an object impacting the original problem in the problem space structure. 

8. The method of claim 1, wherein the matching of a problem and a solution is done with various interface traversals, potentially determined by the selected origin of the traversal, problem & solution definitions & associated space definitions, including system analysis (fitting of system objects like symmetries, sub-systems, sub-interfaces, false assumptions, correlations, and conflicts to problem definition); information problem type composition (mapping the problem as a combination/set/path containing information problem types like an information mismatch or inequality or minimum or overflow or lack); insight path application (using insight paths from other fields to optimize insight generation); problem vectorization (mapping the problem definition to a one-directional tree with inputs on one side, interim inferred important problem concepts in between, and target priorities or attributes on the other, linked by available functions); concept-structure application (a multi-interface traversal linking the concept & structure interfaces, so a target concept combination/set/path or target structural attribute can be achieved with a combination of filters & limits or functions applied to adjust the structure until it matches the target structural attributes or concepts); a pattern interface traversal (where patterns replace missing required data, such as patterns between variables of specific types or system positions to infer their probable relationship); a causal interface traversal (where the problem structures are matched to causal structures to infer probable causation metadata like directness of cause, degree of cause, inevitability, uniqueness of cause, causal tree/network/loop/layer shape); structure-math mapping (a multi- interface traversal to map problem structures to math objects to apply math insights to problem structures); a question-answer interface traversal (where a question is framed as a source position and a target position on a network, and the answer is the most robust path or the path that moves the nearest to the target position or the path that moves in the priority direction on the network); problem space analysis (given whether the problem space changes in a way that invalidates the original or other problems once a particular solution is applied). 

9. The method of claim 1, further comprising determining the success of a particular solution, given the solution requirements stated or inferred from the problem statement & iterating if solution requirements are not met, or if the problem is not fully compressed, or if the solution created other problems in the problem space. 

10. A non-transitory computer-readable medium containing instructions that, when executed by a processor, cause a device to perform operations, the operations comprising: obtaining a problem statement from a user including required solution metrics (such as priorities, functionality, or attributes); identifying problem & problem space metadata (such as problem type & minimum information required to solve the problem); identifying optimal origin interface to start traversing from, interface traversal sequence, & applying interface operations like combine/inject; traversing interface network (including interfaces such as information, insight, structure, math, concept, type, variance, potential, change, intent, perspective, system, attribute, pattern, function, cause, problem/question, solution/answer) of interfaces acting as filters (where an interface is comprised of its definition routes, conversion function, core functions, objects, & attributes, and related objects like patterns & metadata specific to the interface) starting at the origin interface; finding components on the interface that match the problem structures (including related objects like insights, patterns, & functions); compressing the problem statement into its most accurate structure containing the found interface objects; iterating the origin interface selection & interface traversal process for the solution space; identifying & reducing the solution space from this standardized problem format; traversing subsequent interfaces to obtain additional information; reducing the solution space by the problem & problem space definition; returning the identified optimal solution as a set of steps to compress the problem as well as solution metrics, attributes, & actions, and/or insights/ patterns/system/standardized description related to the problem if no solutions are found. 
11. The non-transitory computer-readable medium of claim 10, wherein obtaining a problem statement includes: receiving a problem statement & translating the problem statement into its most standardized form, using standardization methods like replacing esoteric words with more common synonyms, converting passive to active language, and removing words that don't change the meaning of the statement. 
12. The non-transitory computer-readable medium of claim 11, wherein identifying the problem & problem space metadata includes: identifying the problem type given the most adjacent type (such as an information asymmetry, incentive conflict, unenforced rule, finding a prediction function, route optimization) and the minimum information required to solve the problem (inputs like alternate attribute sets; solution requirements; constant assumptions & other dependencies), then mapping the inferred or stated assumptions describing the problem space to a multi-dimensional structure, usually bounded by assumption limit or filter conditions, & indicating possible interactions between the problem objects & the other system objects, & containing the problem object in that space (as a network or other shape indicating the problem variable interactions within the problem space structure). 
13. The non-transitory computer-readable medium of claim 12, wherein identifying the origin interface to start traversing from, interface traversal sequence, & applying interface operations like combine/inject includes: assessing which interface maximizes the value (calculated as a combination of metrics like specificity, uniqueness, differentiation potential) of the given & directly inferable information, which interfaces should be traversed in what sequence, and whether interfaces should be applied to other interfaces with interface operations (applying the conceptual interface to the structural interface for example). 
14. The non-transitory computer-readable medium of claim 13, wherein traversing the interface network includes: converting the problem definition to the interface using the conversion function which applies system-mapping, position-finding, & object-fitting logic, & looks for common attributes between problem objects & interface objects & their structures (like transformations, subsets, & paths) so that interface object relationships can be used to infer relationships about associated problem objects, where the traversal may start from various points on the interface, including core objects & functions, or directly mappable objects to the problem objects, or important or required interface objects. 
15. The non-transitory computer-readable medium of claim 10, wherein the instructions are further configured to iteratively repeat the traversal method on other interfaces, given the achieved distance from the minimum information required to solve the problem, fulfilled solution requirements, & progress in compressing the problem, where information output by each traversal may include information, interface objects, functions, or attributes compressing the problem. 
16. The non-transitory computer-readable medium of claim 10, wherein the solution metadata is identified & the interface network traversal process in claims 3 - 5 is repeated for reducing the problem space to a solution space & then deriving, finding, matching, applying, or building a specific solution or general solution method that compresses the problem into a form that is more adjacent to its final solved form (occupying a point rather than a multi-dimensional structure in the problem space definition), where the solution method may be executed on other interfaces and is then converted to a vector or other object impacting the formatted problem on an interim interface used for calculations, and is then converted to an object impacting the original problem in the problem space structure. 
17. The non-transitory computer-readable medium of claim 10, wherein the matching of a problem and a solution is done with various interface traversals, potentially determined by the selected origin of the traversal, problem & solution definitions & associated space definitions, including system analysis (fitting of system objects like symmetries, sub-systems, sub- interfaces, false assumptions, correlations, and conflicts to problem definition); information problem type composition (mapping the problem as a combination/set/path containing information problem types like an information mismatch or inequality or minimum or overflow or lack); insight path application (using insight paths from other fields to optimize insight generation); problem vectorization (mapping the problem definition to a one-directional tree with inputs on one side, interim inferred important problem concepts in between, and target priorities or attributes on the other, linked by available functions); concept-structure application (a multi-interface traversal linking the concept & structure interfaces, so a target concept combination/set/path or target structural attribute can be achieved with a combination of filters & limits or functions applied to adjust the structure until it matches the target structural attributes or concepts); a pattern interface traversal (where patterns replace missing required data, such as patterns between variables of specific types or system positions to infer their probable relationship); a causal interface traversal (where the problem structures are matched to causal structures to infer probable causation metadata like directness of cause, degree of cause, inevitability, uniqueness of cause, causal tree/network/loop/layer shape); structure-math mapping (a multi-interface traversal to map problem structures to math objects to apply math insights to problem structures); a question-answer interface traversal (where a question is framed as a source position and a target position on a network, and the answer is the most robust path or the path that moves the nearest to the target position or the path that moves in the priority direction on the network); problem space analysis (given whether the problem space changes in a way that invalidates the original or other problems once a particular solution is applied). 
18. The non-transitory computer-readable medium of claim 10, the operations further comprising determining the success of a particular solution, given the solution requirements stated or inferred from the problem statement & iterating if solution requirements are not met, or if the problem is not fully compressed, or if the solution created other problems in the problem space.

19. A system comprising: one or more processors; and one or more non-transitory computer- readable media containing instructions that, when executed by the one or more processors, cause the system to perform operations, the operations comprising: obtaining a problem statement from a user including required solution metrics (such as priorities, functionality, or attributes); identifying problem & problem space metadata (such as problem type & minimum information required to solve the problem); identifying optimal origin interface to start traversing from, interface traversal sequence, & applying interface operations like combine/inject; traversing interface network (including interfaces such as information, insight, structure, math, concept, type, variance, potential, change, intent, perspective, system, attribute, pattern, function, cause, problem/question, solution/answer) of interfaces acting as filters (where an interface is comprised of its definition routes, conversion function, core functions, objects, & attributes, and related objects like patterns & metadata specific to the interface) starting at the origin interface; finding components on the interface that match the problem structures (including related objects like insights, patterns, & functions); compressing the problem statement into its most accurate structure containing the found interface objects; iterating the origin interface selection & interface traversal process for the solution space; identifying & reducing the solution space from this standardized problem format; traversing subsequent interfaces to obtain additional information; reducing the solution space by the problem & problem space definition; returning the identified optimal solution as a set of steps to compress the problem as well as solution metrics, attributes, & actions, and/or insights/patterns/system/ standardized description related to the problem if no solutions are found. 
20. The system of claim 19, wherein obtaining a problem statement includes: receiving a problem statement & translating the problem statement into its most standardized form, using standardization methods like replacing esoteric words with more common synonyms, converting passive to active language, and removing words that don't change the meaning of the statement. 
21. The system of claim 19, wherein identifying the problem & problem space metadata includes: identifying the problem type given the most adjacent type (such as an information asymmetry, incentive conflict, unenforced rule, finding a prediction function, route optimization) and the minimum information required to solve the problem (inputs like alternate attribute sets; solution requirements; constant assumptions & other dependencies), then mapping the inferred or stated assumptions describing the problem space to a multi-dimensional structure, usually bounded by assumption limit or filter conditions, & indicating possible interactions between the problem objects & the other system objects, & containing the problem object in that space (as a network or other shape indicating the problem variable interactions within the problem space structure). 
22. The system of claim 19, wherein identifying the origin interface to start traversing from, interface traversal sequence, & applying interface operations like combine/inject includes: assessing which interface maximizes the value (calculated as a combination of metrics like specificity, uniqueness, differentiation potential) of the given & directly inferable information, which interfaces should be traversed in what sequence, and whether interfaces should be applied to other interfaces with interface operations (applying the conceptual interface to the structural interface for example). 
23. The system of claim 19, wherein traversing the interface network includes: converting the problem definition to the interface using the conversion function which applies system- mapping, position-finding, & object-fitting logic, & looks for common attributes between problem objects & interface objects & their structures (like transformations, subsets, & paths) so that interface object relationships can be used to infer relationships about associated problem objects, where the traversal may start from various points on the interface, including core objects & functions, or directly mappable objects to the problem objects, or important or required interface objects. 
24. The system of claim 19, further comprising iteratively repeating the traversal method on other interfaces, given the achieved distance from the minimum information required to solve the problem, fulfilled solution requirements, & progress in compressing the problem, where information output by each traversal may include information, interface objects, functions, or attributes compressing the problem. 
25. The system of claim 19, wherein the solution metadata is identified & the interface network traversal process in claims 3 - 5 is repeated for reducing the problem space to a solution space & then deriving, finding, matching, applying, or building a specific solution or general solution method that compresses the problem into a form that is more adjacent to its final solved form (occupying a point rather than a multi-dimensional structure in the problem space definition), where the solution method may be executed on other interfaces and is then converted to a vector or other object impacting the formatted problem on an interim interface used for calculations, and is then converted to an object impacting the original problem in the problem space structure. 
26. The system of claim 19, wherein the matching of a problem and a solution is done with various interface traversals, potentially determined by the selected origin of the traversal, problem & solution definitions & associated space definitions, including system analysis (fitting of system objects like symmetries, sub-systems, sub-interfaces, false assumptions, correlations, and conflicts to problem definition); information problem type composition (mapping the problem as a combination/set/path containing information problem types like an information mismatch or inequality or minimum or overflow or lack); insight path application (using insight paths from other fields to optimize insight generation); problem vectorization (mapping the problem definition to a one-directional tree with inputs on one side, interim inferred important problem concepts in between, and target priorities or attributes on the other, linked by available functions); concept-structure application (a multi-interface traversal linking the concept & structure interfaces, so a target concept combination/set/path or target structural attribute can be achieved with a combination of filters & limits or functions applied to adjust the structure until it matches the target structural attributes or concepts); a pattern interface traversal (where patterns replace missing required data, such as patterns between variables of specific types or system positions to infer their probable relationship); a causal interface traversal (where the problem structures are matched to causal structures to infer probable causation metadata like directness of cause, degree of cause, inevitability, uniqueness of cause, causal tree/network/loop/layer shape); structure-math mapping (a multi- interface traversal to map problem structures to math objects to apply math insights to problem structures); a question-answer interface traversal (where a question is framed as a source position and a target position on a network, and the answer is the most robust path or the path that moves the nearest to the target position or the path that moves in the priority direction on the network); problem space analysis (given whether the problem space changes in a way that invalidates the original or other problems once a particular solution is applied). 
27. The system of claim 19, further comprising determining the success of a particular solution, given the solution requirements stated or inferred from the problem statement & iterating if solution requirements are not met, or if the problem is not fully compressed, or if the solution created other problems in the problem space. 