'''
  - example of the analysis for this interface: 
    - this describes the common components that can build other analysis types 
  - objects (interface objects like patterns & concepts) 
  - structures (core structures (intersections, hubs, vertices, maps, limits, symmetries, & alignments)) 
  - concepts (abstract concepts (similarity, power)) 
  - attributes: 
    - interface attributes (intent/priority, potential/certainty, perspective, causality, abstraction) 
    - commonness, scope, optimization, completeness, randomness, reusability, complexity, dependence 
    - contexts (coordinating/opposing, use cases, extreme cases, examples) 
    - coordinatability: integration potential 
    - interaction layer: which objects it interacts with, on what layers of a system like abstraction/scope layer 
    - injectability: can it be used as an input, in many operations 
    - emergence: is it generatable from other objects 
    - neutrality: the range of operations/contexts it can be used for 
    - automation/optimization potential (resource investment, rule stabilization)  
    - applicable definitions (like for equivalence)  
    - minimum object identification information (required identity attributes)  
    - relationships  
      - interface queries that can produce this object 
      - adjacent/related objects of same/different type  
      - problems with adjacent objects & how those problems are generated by adjacent object metadata  
  - functions (structural functions: combine, merge, apply, embed, mix, filter, chain, define, create, derive, identify, change, version)         
'''