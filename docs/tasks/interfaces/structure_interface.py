'''
  - example of the analysis for this interface: 
    - indexing objects by structure allows clear matching of useful structures to objects/attributes/types/rules 
    - this allows objects to be graphed in a standard way, which means translating objects like problems into a computable interface 
  - attributes (order, balance, equivalence, accuracy/fit, position) 
  - objects (comparison, combination, permutation, approximation, metric, activator, trade/cost/benefit, change, filter) 
  - concepts (equivalent, alternate, substitute, opposite, inverse) 

  - examples:
    - market structure analysis
      - the market interface is a standard interface where resources (goods, labor, time, risk, information, expectations, theories, & stored prior labor (currency)) are traded
      - a useful new way to use this is to frame non-resource objects as resources (systems, structures, positions, paths, directions, risk chains, trade loops, markets)
      - then you can apply traditional market analysis (optimal transport) to find, for example, the optimal set of trades to change an industry's position
    - for a problem of type 'conflict', like vectors aiming at a corner of a closed shape (where the shape is formed by the intersections of limiting attributes), the structural way to solve that problem is:
      - reducing the angle of the corner 
        which reduces the difference between corners (and the incentive to aim for a corner) & adds extra alternatives
        - the solution is an example of 'false limit' - the limit of there being a finite supply of corners or the limit of one route occupying a position at a given time can be surmounted with extra resources
      - reducing incentive to aim at corners
        - if the shape has fewer corners, there will be less incentive for internal vectors to aim there
      - reducing motion
        - if the shape has a stable state, the motion of the internal vectors can be reduced or staggered at intervals for resource-distribution
      - adding motion
        - use types of motion to distribute the vectors so they aim at different corners
    - you could apply these methods of solving the structural problem to the original problem 
      (a conflict like competition or overflow or false limit or false alignment if the vectors dont need to aim for the same corner)
    - the way to assign 'conflict' problem type to the closed shape structure with internal vectors is by aligning attributes 
      (incentives that organize motion to create an oversupply of resources (motion vectors) that cant be supported by a resource (position))
   
  - answers questions like:
    - how to identify components with structural attributes like chainability (cause, risk, variance, errors, gaps, limits) or variability
    - how to identify a shape fitting information: chain/stack/network/mix/layer, adjacent shapes, or emergent info shapes like alignments/gaps/conflicts
        - will a type stack (which type values on different type layers) or a network/tree (type hierarchy) be a more useful structure to capture a type relationship
    - identify compression/conversion functions of a shape

  - structures: 
    - dimension
    - layer: parameter determining variance accretion interfaces where interactions develop
    - space: dimension set
    - scale, range, spectrum
    - group: set, potentially across dimensions (cluster of data points)
    - position
    - line: position link
    - sequence
    - center: possible in a shape with symmetries
    - vector: line with restricted metadata (direction & magnitude)
    - circuit: series of lines moving at angles that allow returning to origin point
    - network: linked points
    - tree: network with direction
    - stack: layers representing variables or variants within a type with values (trajectory between points in layers)
    - topology, manifold: permutation set with symmetric properties
    - distance: variance in a similarity measure
    - origin: starting point
    - point: value set of dimensions
    - angle: comparative measure of divergence between paths with same starting point
    - direction: output attribute from input origin given a space-traversal object (line)
    - boundary/edge/limit: extremes of resource combination generative potential
    - inflection: metric change limit (maxima/minima of rate of change)
    - intersection: conflict/overlap
    - tangent: line of least nonzero interactions with another line
    - ratio
    - symmetry
    - scalar
    - path
    - expansion
    - progression
    - distribution

  - functions: 
    - identify components with structural attributes like chainability (cause, risk, variance, errors, gaps, limits) or variability 
    - identify a shape fitting information: chain/stack/network/mix/layer, adjacent shapes, or emergent info shapes like alignments/gaps/conflicts 
      - will a type stack (which type values on different type layers) or a network/tree (type hierarchy) be a more useful structure to capture a type relationship 
    - identify compression/conversion functions of a shape 
    - identify structures in objects: which objects are chained (cause, risk, variance, errors, gaps, limits), which are dimensions (isolatable attributes of change patterns), which have position 
    - find important structures (combinations/layers/matches/differences/sub-components) 
    - map structures (function sets) to target structures (sequences), given a metric like progression toward goal 
      - identify sub-components 
      - a function to convert an object between formats (function => attribute sequence, function => filter sequence, etc) by mapping attributes & functions & other metadata of the objects & removing attributes that don't fit in the target format definition (for example, if you're converting to a type, the output should be in an attribute set format)  
      - a function to identify structure matching a pattern (like identify a structure embodying a mismatch, which is a problem type, given a system network definition, where the system could represent an object, function, or attribute)  
    - structure identification functions 
      - identify shape: chain/stack/network/mix/layer 
      - identify adjacent shapes 
      - identify compression functions of shape given target dimensions 
      - identify transformation functions of shape given source/target shape 
      - identify alignments/symmetries/gaps/conflicts 
      - choosing between structures (like nodes & links) to model another structure (objects in a network): 
        - node: many connections to many other objects having a similar property, like having a type in common, usually unique 
        - links: usually many connections between two objects at a time, having many possible variations, can be repeated 
      - example of structural analysis by applying a particular structure: 
        - market analysis: the market interface is a standard interface where resources (goods, labor, time, risk, information, expectations, theories, & stored prior labor (currency)) are traded 
          - a useful new way to use this is to frame non-resource objects as resources (systems, structures, positions, paths, directions, risk chains, trade loops, markets) 
          - then you can apply traditional market analysis (optimal transport) to find, for example, the optimal set of trades to change an industry's position 
        - time analysis: as time increases, what changes: 
              - position 
              - value (position on a dimension) 
              - distance (position from a base point) 
          - changing position based on embedded time 
          - as change increases, what structures change (which structures are stable even in certain change rates) 
      - apply other standard structural bases as alternatives to time, where change is on a y-axis, and these parameters are on the x-axis 
          - order: changes are framed based on order - to examine change patterns with respect to order (where unit order is original/standard and highest order is most different order possible) 
          - position: changes are framed based on difference from previous position, starting from the standard unit position (default) - for examining change patterns with respect to position distortion 
          - distance: changes are framed based on distance type (distance from value, distance from number type, distance from pattern) - for examining change patterns with respect to distance type 
          - value: changes are framed based on value type (exponential, constant, pattern value, symmetric value, origin value) - for examining change patterns with respect to value 
          - set: changes are framed based on set membership (number type (prime), pattern (progression), distance (adjacent groups)) - for examining change patterns with respect to sets 
          - space: changes are framed based on spaces where that change can be framed (topologies, dimensions, vector spaces) - where spaces are formed by adding dimension units 
      - mapping a structure to an item (value, variable, object, type, system etc) requires an algorithm that: 
        - matches variance with structure change potential 
      - organization/format analysis 
          - optimal path/distribution/states 
          - what would the optimal path be, given a certain intent, object identity, & host system? 
          - "what is the function linking these variables that is most efficient/involves fewest variables/involves known constants?" 
          - identify layer to solve a problem at 
          - identify key objects needed to solve a problem 
          - identify structures for information 
'''